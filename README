_Anghel Andrei - Stelian,
322CA,
Noiembrie 2021_

## **Implementarea temei VideosDB**

**Observație:** De fiecare dată când voi folosi la termenul **SHOW** mă
voi referi la ceea mai este numit în enunțul temei și **videoclip**,
adică un obiect ce poate fi atât film, cât și serial.

### **I. Idee**

Pentru implementare am ales să utilizez un obiect ce stochează toate
informațiile despre actori, show-uri, utilizatori și acțiuni, asupra
căruia sunt aplicate diverse metode pentru îndeplinirea task-urilor.
Am creat o clasă specială pentru afișarea output-ului, o clasă pentru
executarea acțiunilor, o clasă utilitară, clase pentru stocarea obiectelor
de bază, iar pentru implementarea acțiunilor complexe asupra bazei de
date am folosit intensiv prelucrarea cu ajutorul stream-urilor.

### **II. Clasa Database si clasele de bază**

Clasa Database definește practic baza de date sau platforma unde
sunt stocate toate informațiile primite ca input. Va exista un singur
obiect de tip Database în cadrul clasei Main. Clasa Database gestionează
obiecte de tipurile:

- Actor;
- User;
- Movie - extensie a clasei Show;
- Serial - extensie a clasei Show;
- Action.

Fiecare dintre aceste clase conține câmpurile specifice obiectului
definit, cât și câteva metode de calcul a unor proprietăți.

### **III. Clasa ActionExecutor**
Clasa ActionExecutor este o clasă utilitară finală ce definește
metode pentru executarea efectivă a acțiunilor primite ca input.
Toate metodele sunt apelate cu parametrii:
- action => conține date despre tipul acțiunii ce va fi executată;
- database => conține baza de date ce va fi prelucrată;
- output => obiectul de tip output folosit pentru afișarea mesajelor de output.

Metodele pentru executarea acțiunilor sunt separate după
tipul de acțiune (comandă, query, recomandare), iar pentru comanda
de tip query există metode diferite pentru actori, filme, seriale
și utilizatori.

### **IV. Detalii punctuale despre implementare și stream-uri**

- fiecare obiect de tip Actor reține un istoric de show-uri văzute,
o listă de favorite (perechi nume - număr de vizionări stocate într-un
HashMap), o listă a rating-urilor pentru filme (perechi nume - rating 
stocate într-un HashMap) și o listă a rating-urilor
pentru seriale (HashMap cu perechi nume serial - HashMap ce conține 
la rândul lui perechi număr sezon - rating);
- pentru query-uri am folosit stream-uri si sortări pe stream-uri,
respectiv filtrări pe stream-uri. În cazul în care este cerută
o listă în ordine descrescătoare, sortările dupa nume și criteriu
principal (spre exemplu după rating-ul unui show) sunt făcute 
descrescător prin metoda .reversed(), după care sunt luate primele
n elemente din listă cu ajutorul metodei .limit();
- recomandările sunt făcute tot prin intermediul stream-urilor. Au
loc sortarea și filtrare unei listă, urmate de alegerea elementului/elementelor
ce convin;
- am încercat, pe cât posibil, să tratez filmele și serialele în mod
egal, ca show-uri, mai ales în cazul metodelor pentru recomandări.
Am implementat clasa abstractă Show ce conține metode ce sunt aplicate
ambelor tipuri de show-uri.


